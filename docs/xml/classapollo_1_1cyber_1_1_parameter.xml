<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classapollo_1_1cyber_1_1_parameter" kind="class" language="C++" prot="public">
    <compoundname>apollo::cyber::Parameter</compoundname>
    <includes refid="parameter_8h" local="no">parameter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1_parameter_1af14040486811156fb1a4f76140623f11" prot="private" static="no" mutable="no">
        <type>Param</type>
        <definition>Param apollo::cyber::Parameter::param_</definition>
        <argsstring></argsstring>
        <name>param_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="276" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a821e2ddc98cc19c985d77e0371d74366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>()</argsstring>
        <name>Parameter</name>
        <briefdescription>
<para>Empty constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a626c40f9cd316a6a5dfc136596cd8083" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const Parameter &amp;parameter)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> &amp;</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1afb61538a8a543f979a5787e224c66f53" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a5ff93d70601bac8f4ff1a0092c88f75d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const bool bool_value)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>bool_value</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name and bool value type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bool_value</parametername>
</parameternamelist>
<parameterdescription>
<para>bool value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1aa7b936546d672590f8cd662b1ef87912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const int int_value)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>int_value</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name and int value type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_value</parametername>
</parameternamelist>
<parameterdescription>
<para>int value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a2ff0fddb34b46deff5ec701c8512eb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const int64_t int_value)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>int_value</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name and int value type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int_value</parametername>
</parameternamelist>
<parameterdescription>
<para>int value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1aa9a7032ec7ce8ffe4e0e70badcb19751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const float float_value)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>float_value</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name and float value type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>float_value</parametername>
</parameternamelist>
<parameterdescription>
<para>float value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a73ed7f1d7e933f6bfe851a2f1b939067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const double double_value)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>double_value</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name and double value type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>double_value</parametername>
</parameternamelist>
<parameterdescription>
<para>double value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a9e25544df18fd111ce4f678cf8463a32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;string_value)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>string_value</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name and string value type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string_value</parametername>
</parameternamelist>
<parameterdescription>
<para>string value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a11ebed14ade310567b4c150d713f964c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const char *string_value)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string_value</declname>
        </param>
        <briefdescription>
<para>construct with paramter&apos;s name and char* value type </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string_value</parametername>
</parameternamelist>
<parameterdescription>
<para>char* value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a6c004100b2f5c821dd54f9c643b2da5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;msg_str, const std::string &amp;full_name, const std::string &amp;proto_desc)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg_str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>full_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>proto_desc</declname>
        </param>
        <briefdescription>
<para>use a protobuf type value to construct the parameter </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg_str</parametername>
</parameternamelist>
<parameterdescription>
<para>protobuf contents </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>full_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the proto full name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto_desc</parametername>
</parameternamelist>
<parameterdescription>
<para>the proto&apos;s description </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1ad7a3beb3bed6448d31e9143b4a244fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::Parameter::Parameter</definition>
        <argsstring>(const std::string &amp;name, const google::protobuf::Message &amp;msg)</argsstring>
        <name>Parameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const google::protobuf::Message &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>use a google::protobuf::Message type value to construct the parameter </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>protobuf message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a3cd699d1884588eacd665cfa2070351f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::Parameter::FromProtoParam</definition>
        <argsstring>(const Param &amp;param)</argsstring>
        <name>FromProtoParam</name>
        <param>
          <type>const Param &amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Parse a cyber::proto::Param object to cyber::parameter::Parameter object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The cyber::proto::Param object parse from A pointer to the target <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if parse ok, otherwise False </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a3c278e4a712d6dbc0cd1bfd37f6fea24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Param</type>
        <definition>Param apollo::cyber::Parameter::ToProtoParam</definition>
        <argsstring>() const </argsstring>
        <name>ToProtoParam</name>
        <briefdescription>
<para>Parse a cyber::parameter::Parameter object to cyber::proto::Param object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The target cyber::proto::Param object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1af24b9d74e869e311a49462adefe7b918" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ParamType</type>
        <definition>ParamType apollo::cyber::Parameter::Type</definition>
        <argsstring>() const </argsstring>
        <name>Type</name>
        <briefdescription>
<para>Get the cyber:parameter::ParamType of this object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>result cyber:parameter::ParameterType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="156" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a351f1ea21333d16047249f587f937acb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apollo::cyber::Parameter::TypeName</definition>
        <argsstring>() const </argsstring>
        <name>TypeName</name>
        <briefdescription>
<para>Get Paramter&apos;s type name, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>INT,DOUBLE,STRING or protobuf message&apos;s fullname</para><para><simplesect kind="return"><para>std::string the <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref>&apos;s type name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="164" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a17f94a44576b1e90cc2f4d59e997be30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apollo::cyber::Parameter::Descriptor</definition>
        <argsstring>() const </argsstring>
        <name>Descriptor</name>
        <briefdescription>
<para>Get Paramter&apos;s descriptor, only work on protobuf types. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string the <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref>&apos;s type name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="171" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a1a586ca2296aca2c8d397fc4ec56a272" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string apollo::cyber::Parameter::Name</definition>
        <argsstring>() const </argsstring>
        <name>Name</name>
        <briefdescription>
<para>Get the <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::string the <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref>&apos;s name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="178" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="343" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a5b1801efef34c80376cd49cba51baea5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool apollo::cyber::Parameter::AsBool</definition>
        <argsstring>() const </argsstring>
        <name>AsBool</name>
        <briefdescription>
<para>Get Paramter as a bool value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true result </para></simplesect>
<simplesect kind="return"><para>false result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="186" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1ac7b1bdfa2b1ec92990b187e17bfbf24d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t apollo::cyber::Parameter::AsInt64</definition>
        <argsstring>() const </argsstring>
        <name>AsInt64</name>
        <briefdescription>
<para>Get Paramter as an int64_t value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int64_t int64 type result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="193" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1afbfcc7a9bcf9355ebff30ce575ca3cc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double apollo::cyber::Parameter::AsDouble</definition>
        <argsstring>() const </argsstring>
        <name>AsDouble</name>
        <briefdescription>
<para>et Paramter as a double value </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double type result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="200" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1adfa876fd84203bb8e0301bd268260e64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string apollo::cyber::Parameter::AsString</definition>
        <argsstring>() const </argsstring>
        <name>AsString</name>
        <briefdescription>
<para>Get Paramter as a string value. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::string <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref>&apos;s string expression </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="207" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="351" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a4d71bbc64ad58d2bd309d9cf2e44f640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string apollo::cyber::Parameter::DebugString</definition>
        <argsstring>() const </argsstring>
        <name>DebugString</name>
        <briefdescription>
<para>show debug string </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref>&apos;s debug string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a380d65d34dc7d2a0c4221647316b71da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_base_of&lt; google::protobuf::Message, ValueType &gt;::value, ValueType &gt;::type</type>
        <definition>std::enable_if&lt; std::is_same&lt; ValueType, bool &gt;::value, bool &gt;::type apollo::cyber::Parameter::value</definition>
        <argsstring>() const </argsstring>
        <name>value</name>
        <briefdescription>
<para>Translate paramter value as a protobuf::Message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::enable_if&lt;std::is_base_of&lt;google::protobuf::Message, ValueType&gt;::value,ValueType&gt;::type protobuf::Message type result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="227" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="283" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a7ab4738135af14eaddb83b8a07c6a9d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_integral&lt; ValueType &gt;::value &amp;&amp;!std::is_same&lt; ValueType, bool &gt;::value, ValueType &gt;::type</type>
        <definition>std::enable_if&lt; std::is_integral&lt;ValueType&gt;::value &amp;&amp; !std::is_same&lt;ValueType, bool&gt;::value, ValueType&gt;::type apollo::cyber::Parameter::value</definition>
        <argsstring>() const </argsstring>
        <name>value</name>
        <briefdescription>
<para>Translate paramter value to int type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::enable_if&lt;std::is_integral&lt;ValueType&gt;::value &amp;&amp;!std::is_same&lt;ValueType, bool&gt;::value, ValueType&gt;::type int type result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a0787dfa7945da0f2ea66921f61aed9cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_floating_point&lt; ValueType &gt;::value, ValueType &gt;::type</type>
        <definition>std::enable_if&lt;std::is_floating_point&lt;ValueType&gt;::value, ValueType&gt;::type apollo::cyber::Parameter::value</definition>
        <argsstring>() const </argsstring>
        <name>value</name>
        <briefdescription>
<para>Translate paramter value to bool type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::enable_if&lt;std::is_floating_point&lt;ValueType&gt;::value, ValueType&gt;::type floating type result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1aba2060054889906b0e1a41af324847b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_convertible&lt; ValueType, std::string &gt;::value, const std::string &amp; &gt;::type</type>
        <definition>std::enable_if&lt;std::is_convertible&lt;ValueType, std::string&gt;::value, const std::string&amp;&gt;::type apollo::cyber::Parameter::value</definition>
        <argsstring>() const </argsstring>
        <name>value</name>
        <briefdescription>
<para>Translate paramter value to string type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::enable_if&lt;std::is_convertible&lt;ValueType, std::string&gt;::value, const std::string&amp;&gt;::type string type result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1_parameter_1a005aa3db8d9cc545b9b6dc1554c99edc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; ValueType, bool &gt;::value, bool &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;ValueType, bool&gt;::value, bool&gt;::type apollo::cyber::Parameter::value</definition>
        <argsstring>() const </argsstring>
        <name>value</name>
        <briefdescription>
<para>Translate paramter value to bool type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::enable_if&lt;std::is_same&lt;ValueType, bool&gt;::value, bool&gt;::type bool type result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="273" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <computeroutput><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref></computeroutput> holds an apollo::cyber::proto::Param, It&apos;s more human-readable, you can use basic-value type and Protobuf values to construct a paramter. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> is identified by their <computeroutput>name</computeroutput>, and you can get <ref refid="classapollo_1_1cyber_1_1_parameter" kindref="compound">Parameter</ref> content by call <ref refid="classapollo_1_1cyber_1_1_parameter_1a380d65d34dc7d2a0c4221647316b71da" kindref="member">value()</ref> </para>    </detaileddescription>
    <location file="/home/dexin/code/Edith/cyber/parameter/parameter.h" line="41" column="1" bodyfile="/home/dexin/code/Edith/cyber/parameter/parameter.h" bodystart="41" bodyend="277"/>
    <listofallmembers>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a5b1801efef34c80376cd49cba51baea5" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>AsBool</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1afbfcc7a9bcf9355ebff30ce575ca3cc5" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>AsDouble</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1ac7b1bdfa2b1ec92990b187e17bfbf24d" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>AsInt64</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1adfa876fd84203bb8e0301bd268260e64" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>AsString</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a4d71bbc64ad58d2bd309d9cf2e44f640" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>DebugString</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a17f94a44576b1e90cc2f4d59e997be30" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Descriptor</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a3cd699d1884588eacd665cfa2070351f" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>FromProtoParam</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a1a586ca2296aca2c8d397fc4ec56a272" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Name</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1af14040486811156fb1a4f76140623f11" prot="private" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>param_</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a821e2ddc98cc19c985d77e0371d74366" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a626c40f9cd316a6a5dfc136596cd8083" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1afb61538a8a543f979a5787e224c66f53" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a5ff93d70601bac8f4ff1a0092c88f75d" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1aa7b936546d672590f8cd662b1ef87912" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a2ff0fddb34b46deff5ec701c8512eb7b" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1aa9a7032ec7ce8ffe4e0e70badcb19751" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a73ed7f1d7e933f6bfe851a2f1b939067" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a9e25544df18fd111ce4f678cf8463a32" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a11ebed14ade310567b4c150d713f964c" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a6c004100b2f5c821dd54f9c643b2da5e" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1ad7a3beb3bed6448d31e9143b4a244fe0" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Parameter</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a3c278e4a712d6dbc0cd1bfd37f6fea24" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>ToProtoParam</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1af24b9d74e869e311a49462adefe7b918" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>Type</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a351f1ea21333d16047249f587f937acb" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>TypeName</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a380d65d34dc7d2a0c4221647316b71da" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>value</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a7ab4738135af14eaddb83b8a07c6a9d3" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>value</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a0787dfa7945da0f2ea66921f61aed9cb" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>value</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1aba2060054889906b0e1a41af324847b1" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>value</name></member>
      <member refid="classapollo_1_1cyber_1_1_parameter_1a005aa3db8d9cc545b9b6dc1554c99edc" prot="public" virt="non-virtual"><scope>apollo::cyber::Parameter</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
