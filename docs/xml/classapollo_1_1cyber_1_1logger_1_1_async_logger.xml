<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classapollo_1_1cyber_1_1logger_1_1_async_logger" kind="class" language="C++" prot="public">
    <compoundname>apollo::cyber::logger::AsyncLogger</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Logger</basecompoundref>
    <includes refid="async__logger_8h" local="no">async_logger.h</includes>
    <innerclass refid="structapollo_1_1cyber_1_1logger_1_1_async_logger_1_1_msg" prot="private">apollo::cyber::logger::AsyncLogger::Msg</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4" prot="private" static="no">
        <name>State</name>
        <enumvalue id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4a05e01a42de2ef2f76fc008c2f2ac0b11" prot="private">
          <name>INITTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4ad883b067d35376bd78b0f301a0200704" prot="private">
          <name>RUNNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4a26a879c1a0c30577cff7af5688a3b55f" prot="private">
          <name>STOPPED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="183" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="183" bodyend="183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a4d7679337ba167a45f75c006f9c2f340" prot="private" static="no" mutable="no">
        <type>google::base::Logger *const</type>
        <definition>google::base::Logger* const apollo::cyber::logger::AsyncLogger::wrapped_</definition>
        <argsstring></argsstring>
        <name>wrapped_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="164" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a229ef94096336a6f59d7b51b9d688deb" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread apollo::cyber::logger::AsyncLogger::log_thread_</definition>
        <argsstring></argsstring>
        <name>log_thread_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="165" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a0b15b853e7c8a60272ad2526fdcd4ada" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; uint64_t &gt;</type>
        <definition>std::atomic&lt;uint64_t&gt; apollo::cyber::logger::AsyncLogger::flush_count_</definition>
        <argsstring></argsstring>
        <name>flush_count_</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="169" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ae50ea372dfdfe32615dc5d25664c8075" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t apollo::cyber::logger::AsyncLogger::drop_count_</definition>
        <argsstring></argsstring>
        <name>drop_count_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="173" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac63cd1ba9ba6069045fd5663c0d0426c" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::deque&lt; Msg &gt; &gt;</type>
        <definition>std::unique_ptr&lt;std::deque&lt;Msg&gt; &gt; apollo::cyber::logger::AsyncLogger::active_buf_</definition>
        <argsstring></argsstring>
        <name>active_buf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="176" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1afaccc3ec34cc4dd07440ba6c792f891a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::deque&lt; Msg &gt; &gt;</type>
        <definition>std::unique_ptr&lt;std::deque&lt;Msg&gt; &gt; apollo::cyber::logger::AsyncLogger::flushing_buf_</definition>
        <argsstring></argsstring>
        <name>flushing_buf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="180" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1aecb091b504a3adc3eef8a84ccf6dc6c0" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; State &gt;</type>
        <definition>std::atomic&lt;State&gt; apollo::cyber::logger::AsyncLogger::state_</definition>
        <argsstring></argsstring>
        <name>state_</name>
        <initializer>= {INITTED}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="184" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ae8ce648ac146502ec9039f318a2b18e2" prot="private" static="no" mutable="no">
        <type>std::atomic_flag</type>
        <definition>std::atomic_flag apollo::cyber::logger::AsyncLogger::flag_</definition>
        <argsstring></argsstring>
        <name>flag_</name>
        <initializer>= ATOMIC_FLAG_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="185" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ae1668301703ce3c01fe1fd2bf14c645c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::logger::AsyncLogger::AsyncLogger</definition>
        <argsstring>(google::base::Logger *wrapped)</argsstring>
        <name>AsyncLogger</name>
        <param>
          <type>google::base::Logger *</type>
          <declname>wrapped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ab81c56987b35eac2468293214cc0831a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>apollo::cyber::logger::AsyncLogger::~AsyncLogger</definition>
        <argsstring>()</argsstring>
        <name>~AsyncLogger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a57a56cd44d68c932c229638169a8ece1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::logger::AsyncLogger::Start</definition>
        <argsstring>()</argsstring>
        <name>Start</name>
        <briefdescription>
<para>start the async logger </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a36aceb58b08edfba1417d18d60996811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::logger::AsyncLogger::Stop</definition>
        <argsstring>()</argsstring>
        <name>Stop</name>
        <briefdescription>
<para>Stop the thread. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a75894f5de117c03d05c013f2638639a1" kindref="member">Flush()</ref> and <ref refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1abe281a699f379c7274ef0fc9fe171eab" kindref="member">Write()</ref> must not be called after this. NOTE: this is currently only used in tests: in real life, we enable async logging once when the program starts and then never disable it. REQUIRES: <ref refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a57a56cd44d68c932c229638169a8ece1" kindref="member">Start()</ref> must have been called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1abe281a699f379c7274ef0fc9fe171eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::logger::AsyncLogger::Write</definition>
        <argsstring>(bool force_flush, time_t timestamp, const char *message, int message_len) override</argsstring>
        <name>Write</name>
        <param>
          <type>bool</type>
          <declname>force_flush</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>message_len</declname>
        </param>
        <briefdescription>
<para>Write a message to the log. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a57a56cd44d68c932c229638169a8ece1" kindref="member">Start()</ref> must have been called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force_flush</parametername>
</parameternamelist>
<parameterdescription>
<para>is set by the GLog library based on the configured &apos;<ndash/>logbuflevel&apos; flag. Any messages logged at the configured level or higher result in &apos;force_flush&apos; being set to true, indicating that the message should be immediately written to the log rather than buffered in memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>is the time of write a message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>is the info to be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_len</parametername>
</parameternamelist>
<parameterdescription>
<para>is the length of message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a75894f5de117c03d05c013f2638639a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::logger::AsyncLogger::Flush</definition>
        <argsstring>() override</argsstring>
        <name>Flush</name>
        <briefdescription>
<para>Flush any buffered messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1af14fc46b26821895b40def530a4a5aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t apollo::cyber::logger::AsyncLogger::LogSize</definition>
        <argsstring>() override</argsstring>
        <name>LogSize</name>
        <briefdescription>
<para>Get the current LOG file size. </para>        </briefdescription>
        <detaileddescription>
<para>The return value is an approximate value since some logged data may not have been flushed to disk yet.</para><para><simplesect kind="return"><para>the log file size </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac2e076653b98ccc604771d372f2f9c1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::thread *</type>
        <definition>std::thread* apollo::cyber::logger::AsyncLogger::LogThread</definition>
        <argsstring>()</argsstring>
        <name>LogThread</name>
        <briefdescription>
<para>get the log thead </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the pointer of log thread </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="121" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="121" bodyend="121"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1af1600cd1348d78c6ab0e806928a2d50b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::logger::AsyncLogger::RunThread</definition>
        <argsstring>()</argsstring>
        <name>RunThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a21efedb82c9b6263cd6afe2461e468a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void apollo::cyber::logger::AsyncLogger::FlushBuffer</definition>
        <argsstring>(const std::unique_ptr&lt; std::deque&lt; Msg &gt;&gt; &amp;msg)</argsstring>
        <name>FlushBuffer</name>
        <param>
          <type>const std::unique_ptr&lt; std::deque&lt; Msg &gt;&gt; &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper for a glog <ref refid="classapollo_1_1cyber_1_1logger_1_1_logger" kindref="compound">Logger</ref> which asynchronously writes log messages. </para>    </briefdescription>
    <detaileddescription>
<para>This class starts a new thread responsible for forwarding the messages to the logger, and performs double buffering. Writers append to the current buffer and then wake up the logger thread. The logger swaps in a new buffer and writes any accumulated messages to the wrapped <ref refid="classapollo_1_1cyber_1_1logger_1_1_logger" kindref="compound">Logger</ref>.</para><para>This double-buffering design dramatically improves performance, especially for logging messages which require flushing the underlying file (i.e WARNING and above for default). The flush can take a couple of milliseconds, and in some cases can even block for hundreds of milliseconds or more. With the double-buffered approach, threads can proceed with useful work while the IO thread blocks.</para><para>The semantics provided by this wrapper are slightly weaker than the default glog semantics. By default, glog will immediately (synchronously) flush WARNING and above to the underlying file, whereas here we are deferring that flush to a separate thread. This means that a crash just after a &apos;LOG_WARN&apos; would may be missing the message in the logs, but the perf benefit is probably worth it. We do take care that a glog FATAL message flushes all buffered log messages before exiting.</para><para><simplesect kind="warning"><para>The logger limits the total amount of buffer space, so if the underlying log blocks for too long, eventually the threads generating the log messages will block as well. This prevents runaway memory usage. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="411">
        <label>apollo::cyber::logger::AsyncLogger</label>
        <link refid="classapollo_1_1cyber_1_1logger_1_1_async_logger"/>
        <childnode refid="412" relation="public-inheritance">
        </childnode>
      </node>
      <node id="412">
        <label>google::base::Logger</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="413">
        <label>apollo::cyber::logger::AsyncLogger</label>
        <link refid="classapollo_1_1cyber_1_1logger_1_1_async_logger"/>
        <childnode refid="414" relation="public-inheritance">
        </childnode>
      </node>
      <node id="414">
        <label>google::base::Logger</label>
      </node>
    </collaborationgraph>
    <location file="/home/dexin/code/Edith/cyber/logger/async_logger.h" line="69" column="1" bodyfile="/home/dexin/code/Edith/cyber/logger/async_logger.h" bodystart="69" bodyend="188"/>
    <listofallmembers>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac63cd1ba9ba6069045fd5663c0d0426c" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>active_buf_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ae1668301703ce3c01fe1fd2bf14c645c" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>AsyncLogger</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ae50ea372dfdfe32615dc5d25664c8075" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>drop_count_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ae8ce648ac146502ec9039f318a2b18e2" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>flag_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a75894f5de117c03d05c013f2638639a1" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>Flush</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a0b15b853e7c8a60272ad2526fdcd4ada" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>flush_count_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a21efedb82c9b6263cd6afe2461e468a6" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>FlushBuffer</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1afaccc3ec34cc4dd07440ba6c792f891a" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>flushing_buf_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4a05e01a42de2ef2f76fc008c2f2ac0b11" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>INITTED</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a229ef94096336a6f59d7b51b9d688deb" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>log_thread_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1af14fc46b26821895b40def530a4a5aeb" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>LogSize</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac2e076653b98ccc604771d372f2f9c1c" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>LogThread</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4ad883b067d35376bd78b0f301a0200704" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>RUNNING</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1af1600cd1348d78c6ab0e806928a2d50b" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>RunThread</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a57a56cd44d68c932c229638169a8ece1" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>Start</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>State</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1aecb091b504a3adc3eef8a84ccf6dc6c0" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>state_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a36aceb58b08edfba1417d18d60996811" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>Stop</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ac693c5c55875861feb508ed2b60223a4a26a879c1a0c30577cff7af5688a3b55f" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>STOPPED</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1a4d7679337ba167a45f75c006f9c2f340" prot="private" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>wrapped_</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1abe281a699f379c7274ef0fc9fe171eab" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>Write</name></member>
      <member refid="classapollo_1_1cyber_1_1logger_1_1_async_logger_1ab81c56987b35eac2468293214cc0831a" prot="public" virt="non-virtual"><scope>apollo::cyber::logger::AsyncLogger</scope><name>~AsyncLogger</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
