<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="component_8h" kind="file" language="C++">
    <compoundname>component.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="yes">cyber/base/macros.h</includes>
    <includes local="yes">cyber/blocker/blocker_manager.h</includes>
    <includes local="yes">cyber/common/global_data.h</includes>
    <includes local="yes">cyber/common/types.h</includes>
    <includes local="yes">cyber/common/util.h</includes>
    <includes refid="component__base_8h" local="yes">cyber/component/component_base.h</includes>
    <includes local="yes">cyber/croutine/routine_factory.h</includes>
    <includes local="yes">cyber/data/data_visitor.h</includes>
    <includes local="yes">cyber/scheduler/scheduler.h</includes>
    <includedby refid="cyber_8h" local="yes">/home/dexin/code/Edith/cyber/cyber.h</includedby>
    <incdepgraph>
      <node id="35">
        <label>list</label>
      </node>
      <node id="85">
        <label>cyber/proto/run_mode_conf.pb.h</label>
      </node>
      <node id="60">
        <label>cyber/service_discovery/container/warehouse_base.h</label>
        <link refid="warehouse__base_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>cyber/node/node_service_impl.h</label>
        <link refid="node__service__impl_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>cyber/base/atomic_rw_lock.h</label>
      </node>
      <node id="52">
        <label>fastrtps/participant/Participant.h</label>
      </node>
      <node id="22">
        <label>atomic</label>
      </node>
      <node id="24">
        <label>cyber/class_loader/class_loader.h</label>
      </node>
      <node id="39">
        <label>cyber/croutine/routine_factory.h</label>
      </node>
      <node id="65">
        <label>fastrtps/attributes/PublisherAttributes.h</label>
      </node>
      <node id="49">
        <label>cyber/base/signal.h</label>
      </node>
      <node id="27">
        <label>cyber/node/node.h</label>
        <link refid="node_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>functional</label>
      </node>
      <node id="76">
        <label>limits</label>
      </node>
      <node id="69">
        <label>cyber/service_discovery/communication/subscriber_listener.h</label>
        <link refid="subscriber__listener_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>cyber/time/duration.h</label>
        <link refid="duration_8h_source"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>cyber/proto/role_attributes.pb.h</label>
      </node>
      <node id="66">
        <label>fastrtps/attributes/SubscriberAttributes.h</label>
      </node>
      <node id="70">
        <label>fastrtps/subscriber/SampleInfo.h</label>
      </node>
      <node id="87">
        <label>cyber/service/client.h</label>
        <link refid="client_8h_source"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>cstdint</label>
      </node>
      <node id="61">
        <label>cyber/service_discovery/role/role.h</label>
        <link refid="role_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>cyber/transport/rtps/participant.h</label>
      </node>
      <node id="40">
        <label>cyber/data/data_visitor.h</label>
      </node>
      <node id="16">
        <label>cyber/base/macros.h</label>
      </node>
      <node id="29">
        <label>cyber/node/node_channel_impl.h</label>
        <link refid="node__channel__impl_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>cyber/component/component_base.h</label>
        <link refid="component__base_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>cmath</label>
      </node>
      <node id="81">
        <label>stdexcept</label>
      </node>
      <node id="82">
        <label>cyber/node/writer.h</label>
        <link refid="writer_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>fastrtps/publisher/Publisher.h</label>
      </node>
      <node id="23">
        <label>string</label>
      </node>
      <node id="18">
        <label>cyber/common/global_data.h</label>
      </node>
      <node id="17">
        <label>cyber/blocker/blocker_manager.h</label>
      </node>
      <node id="41">
        <label>cyber/node/reader_base.h</label>
        <link refid="reader__base_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>map</label>
      </node>
      <node id="20">
        <label>cyber/common/util.h</label>
      </node>
      <node id="55">
        <label>unordered_set</label>
      </node>
      <node id="83">
        <label>cyber/common/log.h</label>
      </node>
      <node id="75">
        <label>cyber/time/time.h</label>
        <link refid="time_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>cyber/proto/topology_change.pb.h</label>
      </node>
      <node id="59">
        <label>cyber/service_discovery/container/multi_value_warehouse.h</label>
        <link refid="multi__value__warehouse_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>cyber/blocker/intra_writer.h</label>
      </node>
      <node id="54">
        <label>cyber/service_discovery/specific_manager/channel_manager.h</label>
        <link refid="channel__manager_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>cyber/service_discovery/specific_manager/node_manager.h</label>
        <link refid="node__manager_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>gflags/gflags.h</label>
      </node>
      <node id="94">
        <label>cyber/scheduler/scheduler.h</label>
      </node>
      <node id="47">
        <label>cyber/service_discovery/topology_manager.h</label>
        <link refid="topology__manager_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>cyber/node/writer_base.h</label>
        <link refid="writer__base_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>cyber/service_discovery/container/graph.h</label>
        <link refid="graph_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>cyber/service_discovery/container/single_value_warehouse.h</label>
        <link refid="single__value__warehouse_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>fastrtps/participant/ParticipantListener.h</label>
      </node>
      <node id="90">
        <label>tuple</label>
      </node>
      <node id="88">
        <label>future</label>
      </node>
      <node id="19">
        <label>cyber/common/types.h</label>
      </node>
      <node id="64">
        <label>cyber/service_discovery/specific_manager/manager.h</label>
        <link refid="manager_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>cyber/service/service_base.h</label>
        <link refid="service__base_8h_source"/>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>cyber/event/perf_event_cache.h</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="46">
        <label>cyber/scheduler/scheduler_factory.h</label>
      </node>
      <node id="89">
        <label>sstream</label>
      </node>
      <node id="30">
        <label>cyber/blocker/intra_reader.h</label>
      </node>
      <node id="50">
        <label>cyber/service_discovery/communication/participant_listener.h</label>
        <link refid="participant__listener_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>fastrtps/Domain.h</label>
      </node>
      <node id="68">
        <label>fastrtps/subscriber/Subscriber.h</label>
      </node>
      <node id="71">
        <label>fastrtps/subscriber/SubscriberListener.h</label>
      </node>
      <node id="96">
        <label>cyber/proto/component_conf.pb.h</label>
      </node>
      <node id="80">
        <label>iostream</label>
      </node>
      <node id="42">
        <label>cyber/common/macros.h</label>
      </node>
      <node id="37">
        <label>unordered_map</label>
      </node>
      <node id="78">
        <label>climits</label>
      </node>
      <node id="93">
        <label>cyber/service/service.h</label>
        <link refid="service_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>mutex</label>
      </node>
      <node id="92">
        <label>chrono</label>
      </node>
      <node id="25">
        <label>cyber/common/environment.h</label>
      </node>
      <node id="91">
        <label>cyber/service/client_base.h</label>
        <link refid="client__base_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>cyber/common/file.h</label>
      </node>
      <node id="12">
        <label>/home/dexin/code/Edith/cyber/component/component.h</label>
        <link refid="component.h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>cyber/blocker/blocker.h</label>
      </node>
      <node id="44">
        <label>cyber/transport/transport.h</label>
      </node>
      <node id="34">
        <label>algorithm</label>
      </node>
      <node id="33">
        <label>cyber/node/reader.h</label>
        <link refid="reader_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>cyber/message/message_traits.h</label>
      </node>
      <node id="73">
        <label>cyber/service_discovery/specific_manager/service_manager.h</label>
        <link refid="service__manager_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="99">
        <label>/home/dexin/code/Edith/cyber/cyber.h</label>
        <link refid="cyber_8h_source"/>
      </node>
      <node id="98">
        <label>/home/dexin/code/Edith/cyber/component/component.h</label>
        <link refid="component.h"/>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classapollo_1_1cyber_1_1_component" prot="public">apollo::cyber::Component</innerclass>
    <innerclass refid="classapollo_1_1cyber_1_1_component_3_01_null_type_00_01_null_type_00_01_null_type_00_01_null_type_01_4" prot="public">apollo::cyber::Component&lt; NullType, NullType, NullType, NullType &gt;</innerclass>
    <innerclass refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_null_type_00_01_null_type_00_01_null_type_01_4" prot="public">apollo::cyber::Component&lt; M0, NullType, NullType, NullType &gt;</innerclass>
    <innerclass refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_m1_00_01_null_type_00_01_null_type_01_4" prot="public">apollo::cyber::Component&lt; M0, M1, NullType, NullType &gt;</innerclass>
    <innerclass refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_m1_00_01_m2_00_01_null_type_01_4" prot="public">apollo::cyber::Component&lt; M0, M1, M2, NullType &gt;</innerclass>
    <innernamespace refid="namespaceapollo">apollo</innernamespace>
    <innernamespace refid="namespaceapollo_1_1cyber">apollo::cyber</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="component_8h_1a031103527dc7f59a627459d635de10f8" prot="public" static="no">
        <name>CYBER_REGISTER_COMPONENT</name>
        <param><defname>name</defname></param>
        <initializer>CLASS_LOADER_REGISTER_CLASS(name, <ref refid="classapollo_1_1cyber_1_1_component_base" kindref="compound">apollo::cyber::ComponentBase</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dexin/code/Edith/cyber/component/component.h" line="526" column="9" bodyfile="/home/dexin/code/Edith/cyber/component/component.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2018<sp/>The<sp/>Apollo<sp/>Authors.<sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYBER_COMPONENT_COMPONENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYBER_COMPONENT_COMPONENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/base/macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/blocker/blocker_manager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/common/global_data.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/common/types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/common/util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/component/component_base.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/croutine/routine_factory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/data/data_visitor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cyber/scheduler/scheduler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceapollo" kindref="compound">apollo</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecyber" kindref="compound">cyber</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>apollo::cyber::common::GlobalData;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>apollo::cyber::proto::RoleAttributes;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0<sp/>=<sp/>NullType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1<sp/>=<sp/>NullType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2<sp/>=<sp/>NullType,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3<sp/>=<sp/>NullType&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Component<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ComponentBase<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>Component()<sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>~Component()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Process(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M3&gt;&amp;<sp/>msg3);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Proc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M3&gt;&amp;<sp/>msg3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="90" refid="classapollo_1_1cyber_1_1_component_3_01_null_type_00_01_null_type_00_01_null_type_00_01_null_type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>&lt;NullType,<sp/>NullType,<sp/>NullType,<sp/>NullType&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_base" kindref="compound">ComponentBase</ref><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>~<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0&gt;</highlight></codeline>
<codeline lineno="98" refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_null_type_00_01_null_type_00_01_null_type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>&lt;M0,<sp/>NullType,<sp/>NullType,<sp/>NullType&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_base" kindref="compound">ComponentBase</ref><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>~<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Process(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Proc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1&gt;</highlight></codeline>
<codeline lineno="110" refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_m1_00_01_null_type_00_01_null_type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>&lt;M0,<sp/>M1,<sp/>NullType,<sp/>NullType&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_base" kindref="compound">ComponentBase</ref><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>~<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Process(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Proc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2&gt;</highlight></codeline>
<codeline lineno="122" refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_m1_00_01_m2_00_01_null_type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>&lt;M0,<sp/>M1,<sp/>M2,<sp/>NullType&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_base" kindref="compound">ComponentBase</ref><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>~<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Process(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Proc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, NullType, NullType, NullType&gt;::Process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_shutdown_.load())<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Proc(msg);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Component&lt;NullType, NullType, NullType&gt;::Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>node_.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_node" kindref="compound">Node</ref>(config.name()));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>LoadConfigFiles(config);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Init())<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>Init()<sp/>failed.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Component&lt;M0, NullType, NullType, NullType&gt;::Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>node_.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_node" kindref="compound">Node</ref>(config.name()));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>LoadConfigFiles(config);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.readers_size()<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>config<sp/>file:<sp/>too<sp/>few<sp/>readers.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Init())<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>Init()<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_reality_mode<sp/>=<sp/>GlobalData::Instance()-&gt;IsRealityMode();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="structapollo_1_1cyber_1_1_reader_config" kindref="compound">ReaderConfig</ref><sp/>reader_cfg;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(0).channel();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(0).qos_profile());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(0).pending_queue_size();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>std::weak_ptr&lt;Component&lt;M0&gt;&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>std::dynamic_pointer_cast&lt;<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0&gt;</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lock();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;Process(msg);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>object<sp/>has<sp/>been<sp/>destroyed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Reader&lt;M0&gt;&gt;<sp/>reader<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_likely(is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/>node_-&gt;CreateReader&lt;M0&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/>node_-&gt;CreateReader&lt;M0&gt;(reader_cfg,<sp/>func);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>create<sp/>reader<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>readers_.emplace_back(std::move(reader));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_unlikely(!is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>data::VisitorConfig<sp/>conf<sp/>=<sp/>{readers_[0]-&gt;ChannelId(),<sp/>readers_[0]-&gt;PendingQueueSize()};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dv<sp/>=<sp/>std::make_shared&lt;data::DataVisitor&lt;M0&gt;&gt;(conf);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>croutine::RoutineFactory<sp/>factory<sp/>=<sp/>croutine::CreateRoutineFactory&lt;M0&gt;(func,<sp/>dv);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sched<sp/>=<sp/>scheduler::Instance();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sched-&gt;CreateTask(factory,<sp/>node_-&gt;Name());</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1&gt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, M1, NullType, NullType&gt;::Process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_shutdown_.load())<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Proc(msg0,<sp/>msg1);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Component&lt;M0, M1, NullType, NullType&gt;::Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>node_.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_node" kindref="compound">Node</ref>(config.name()));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>LoadConfigFiles(config);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.readers_size()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>config<sp/>file:<sp/>too<sp/>few<sp/>readers.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Init())<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>Init()<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_reality_mode<sp/>=<sp/>GlobalData::Instance()-&gt;IsRealityMode();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="structapollo_1_1cyber_1_1_reader_config" kindref="compound">ReaderConfig</ref><sp/>reader_cfg;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(1).channel();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(1).qos_profile());</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(1).pending_queue_size();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reader1<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M1&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(0).channel();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(0).qos_profile());</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(0).pending_queue_size();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Reader&lt;M0&gt;&gt;<sp/>reader0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_likely(is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>reader0<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M0&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>std::weak_ptr&lt;Component&lt;M0,<sp/>M1&gt;&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, M1&gt;</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blocker1<sp/>=</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocker::BlockerManager::Instance()-&gt;GetBlocker&lt;M1&gt;(config.readers(1).channel());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>blocker1](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lock();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blocker1-&gt;IsPublishedEmpty())<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg1<sp/>=<sp/>blocker1-&gt;GetLatestPublishedPtr();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;Process(msg0,<sp/>msg1);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>object<sp/>has<sp/>been<sp/>destroyed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>reader0<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M0&gt;(reader_cfg,<sp/>func);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader0<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>reader1<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>create<sp/>reader<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader0));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader1));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_unlikely(!is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sched<sp/>=<sp/>scheduler::Instance();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>std::weak_ptr&lt;Component&lt;M0,<sp/>M1&gt;&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, M1&gt;</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lock();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;Process(msg0,<sp/>msg1);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>object<sp/>has<sp/>been<sp/>destroyed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>std::vector&lt;data::VisitorConfig&gt;<sp/>config_list;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>reader<sp/>:<sp/>readers_)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>config_list.emplace_back(reader-&gt;ChannelId(),<sp/>reader-&gt;PendingQueueSize());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dv<sp/>=<sp/>std::make_shared&lt;data::DataVisitor&lt;M0,<sp/>M1&gt;&gt;(config_list);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>croutine::RoutineFactory<sp/>factory<sp/>=<sp/>croutine::CreateRoutineFactory&lt;M0,<sp/>M1&gt;(func,<sp/>dv);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sched-&gt;CreateTask(factory,<sp/>node_-&gt;Name());</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, M1, M2, NullType&gt;::Process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_shutdown_.load())<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Proc(msg0,<sp/>msg1,<sp/>msg2);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Component&lt;M0, M1, M2, NullType&gt;::Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>node_.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_node" kindref="compound">Node</ref>(config.name()));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>LoadConfigFiles(config);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.readers_size()<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>config<sp/>file:<sp/>too<sp/>few<sp/>readers.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Init())<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>Init()<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_reality_mode<sp/>=<sp/>GlobalData::Instance()-&gt;IsRealityMode();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="structapollo_1_1cyber_1_1_reader_config" kindref="compound">ReaderConfig</ref><sp/>reader_cfg;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(1).channel();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(1).qos_profile());</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(1).pending_queue_size();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reader1<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M1&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(2).channel();</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(2).qos_profile());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(2).pending_queue_size();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reader2<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M2&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(0).channel();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(0).qos_profile());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(0).pending_queue_size();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Reader&lt;M0&gt;&gt;<sp/>reader0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_likely(is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>reader0<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M0&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>std::weak_ptr&lt;Component&lt;M0,<sp/>M1,<sp/>M2,<sp/>NullType&gt;&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_m1_00_01_m2_00_01_null_type_01_4" kindref="compound">Component&lt;M0, M1, M2, NullType&gt;</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blocker1<sp/>=</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocker::BlockerManager::Instance()-&gt;GetBlocker&lt;M1&gt;(config.readers(1).channel());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blocker2<sp/>=</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocker::BlockerManager::Instance()-&gt;GetBlocker&lt;M2&gt;(config.readers(2).channel());</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>blocker1,<sp/>blocker2](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lock();</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blocker1-&gt;IsPublishedEmpty()<sp/>&amp;&amp;<sp/>!blocker2-&gt;IsPublishedEmpty())<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg1<sp/>=<sp/>blocker1-&gt;GetLatestPublishedPtr();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg2<sp/>=<sp/>blocker2-&gt;GetLatestPublishedPtr();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;Process(msg0,<sp/>msg1,<sp/>msg2);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>object<sp/>has<sp/>been<sp/>destroyed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>reader0<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M0&gt;(reader_cfg,<sp/>func);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader0<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>reader1<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>reader2<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>create<sp/>reader<sp/>failed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader0));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader1));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader2));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_unlikely(!is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sched<sp/>=<sp/>scheduler::Instance();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>std::weak_ptr&lt;Component&lt;M0,<sp/>M1,<sp/>M2,<sp/>NullType&gt;&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="classapollo_1_1cyber_1_1_component_3_01_m0_00_01_m1_00_01_m2_00_01_null_type_01_4" kindref="compound">Component&lt;M0, M1, M2, NullType&gt;</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lock();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;Process(msg0,<sp/>msg1,<sp/>msg2);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>object<sp/>has<sp/>been<sp/>destroyed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>std::vector&lt;data::VisitorConfig&gt;<sp/>config_list;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>reader<sp/>:<sp/>readers_)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>config_list.emplace_back(reader-&gt;ChannelId(),<sp/>reader-&gt;PendingQueueSize());</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dv<sp/>=<sp/>std::make_shared&lt;data::DataVisitor&lt;M0,<sp/>M1,<sp/>M2&gt;&gt;(config_list);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>croutine::RoutineFactory<sp/>factory<sp/>=<sp/>croutine::CreateRoutineFactory&lt;M0,<sp/>M1,<sp/>M2&gt;(func,<sp/>dv);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sched-&gt;CreateTask(factory,<sp/>node_-&gt;Name());</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3&gt;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, M1, M2, M3&gt;::Process</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M3&gt;&amp;<sp/>msg3)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_shutdown_.load())<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Proc(msg0,<sp/>msg1,<sp/>msg2,<sp/>msg3);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M3&gt;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_component_1ae68b7c7dce67c4d5c6c024c910bb9d92" kindref="member">Component&lt;M0, M1, M2, M3&gt;::Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ComponentConfig&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>node_.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classapollo_1_1cyber_1_1_node" kindref="compound">Node</ref>(config.name()));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>LoadConfigFiles(config);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.readers_size()<sp/>&lt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>config<sp/>file:<sp/>too<sp/>few<sp/>readers_.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Init())<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>Init()<sp/>failed.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_reality_mode<sp/>=<sp/>GlobalData::Instance()-&gt;IsRealityMode();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="structapollo_1_1cyber_1_1_reader_config" kindref="compound">ReaderConfig</ref><sp/>reader_cfg;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(1).channel();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(1).qos_profile());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(1).pending_queue_size();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reader1<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M1&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(2).channel();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(2).qos_profile());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(2).pending_queue_size();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reader2<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M2&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(3).channel();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(3).qos_profile());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(3).pending_queue_size();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reader3<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M3&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>reader_cfg.channel_name<sp/>=<sp/>config.readers(0).channel();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>reader_cfg.qos_profile.CopyFrom(config.readers(0).qos_profile());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>reader_cfg.<ref refid="structapollo_1_1cyber_1_1_reader_config_1affa7656a5714023523d0f9202d0d0f2b" kindref="member">pending_queue_size</ref><sp/>=<sp/>config.readers(0).pending_queue_size();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Reader&lt;M0&gt;&gt;<sp/>reader0<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_likely(is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>reader0<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M0&gt;(reader_cfg);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>std::weak_ptr&lt;Component&lt;M0,<sp/>M1,<sp/>M2,<sp/>M3&gt;&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, M1, M2, M3&gt;</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blocker1<sp/>=</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocker::BlockerManager::Instance()-&gt;GetBlocker&lt;M1&gt;(config.readers(1).channel());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blocker2<sp/>=</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocker::BlockerManager::Instance()-&gt;GetBlocker&lt;M2&gt;(config.readers(2).channel());</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>blocker3<sp/>=</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocker::BlockerManager::Instance()-&gt;GetBlocker&lt;M3&gt;(config.readers(3).channel());</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>blocker1,<sp/>blocker2,<sp/>blocker3](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lock();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blocker1-&gt;IsPublishedEmpty()<sp/>&amp;&amp;<sp/>!blocker2-&gt;IsPublishedEmpty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!blocker3-&gt;IsPublishedEmpty())<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg1<sp/>=<sp/>blocker1-&gt;GetLatestPublishedPtr();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg2<sp/>=<sp/>blocker2-&gt;GetLatestPublishedPtr();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>msg3<sp/>=<sp/>blocker3-&gt;GetLatestPublishedPtr();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;Process(msg0,<sp/>msg1,<sp/>msg2,<sp/>msg3);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>object<sp/>has<sp/>been<sp/>destroyed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>reader0<sp/>=<sp/>node_-&gt;template<sp/>CreateReader&lt;M0&gt;(reader_cfg,<sp/>func);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader0<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>reader1<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>reader2<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>reader3<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>create<sp/>reader<sp/>failed.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader0));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader1));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader2));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>readers_.push_back(std::move(reader3));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cyber_unlikely(!is_reality_mode))<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sched<sp/>=<sp/>scheduler::Instance();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>std::weak_ptr&lt;Component&lt;M0,<sp/>M1,<sp/>M2,<sp/>M3&gt;&gt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::dynamic_pointer_cast&lt;<ref refid="classapollo_1_1cyber_1_1_component" kindref="compound">Component&lt;M0, M1, M2, M3&gt;</ref>&gt;(shared_from_this());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[</highlight><highlight class="keyword">self</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M0&gt;&amp;<sp/>msg0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M1&gt;&amp;<sp/>msg1,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M2&gt;&amp;<sp/>msg2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;M3&gt;&amp;<sp/>msg3)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lock();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;Process(msg0,<sp/>msg1,<sp/>msg2,<sp/>msg3);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Component<sp/>object<sp/>has<sp/>been<sp/>destroyed.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>std::vector&lt;data::VisitorConfig&gt;<sp/>config_list;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>reader<sp/>:<sp/>readers_)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>config_list.emplace_back(reader-&gt;ChannelId(),<sp/>reader-&gt;PendingQueueSize());</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dv<sp/>=<sp/>std::make_shared&lt;data::DataVisitor&lt;M0,<sp/>M1,<sp/>M2,<sp/>M3&gt;&gt;(config_list);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>croutine::RoutineFactory<sp/>factory<sp/>=<sp/>croutine::CreateRoutineFactory&lt;M0,<sp/>M1,<sp/>M2,<sp/>M3&gt;(func,<sp/>dv);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sched-&gt;CreateTask(factory,<sp/>node_-&gt;Name());</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYBER_REGISTER_COMPONENT(name)<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/><sp/>CLASS_LOADER_REGISTER_CLASS(name,<sp/>apollo::cyber::ComponentBase)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cyber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>apollo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>CYBER_COMPONENT_COMPONENT_H_</highlight></codeline>
    </programlisting>
    <location file="/home/dexin/code/Edith/cyber/component/component.h"/>
  </compounddef>
</doxygen>
